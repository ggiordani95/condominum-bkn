// prisma/schema.prisma
// Multi-tenant condominium management system schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  subdomain String   @unique
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  memberships Membership[]
  locations   Location[]
  units       Unit[]

  @@map("tenants")
}

model User {
  id           String    @id
  email        String    @unique @db.Citext
  password     String
  name         String
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  memberships      Membership[]
  residentVisitors ResidentVisitor[]

  @@index([email, isActive], name: "idx_users_email_status")
  @@map("users")
}

model Membership {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tenantId  String   @map("tenant_id")
  role      String
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId], name: "memberships_user_id_tenant_id_key")
  @@index([userId], name: "memberships_primary_once_per_user")
  @@index([tenantId], name: "idx_memberships_tenant")
  @@index([userId], name: "idx_memberships_user")
  @@map("memberships")
}

model Location {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  name      String
  kind      String   @default("condo")
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  units  Unit[]

  @@unique([tenantId, name], name: "locations_tenant_id_name_key")
  @@index([tenantId], name: "idx_locations_tenant")
  @@map("locations")
}

model Unit {
  id         String   @id @default(uuid())
  tenantId   String   @map("tenant_id")
  locationId String   @map("location_id")
  code       String
  status     String   @default("active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, code], name: "units_location_id_code_key")
  @@unique([tenantId, code], name: "units_tenant_id_code_key")
  @@index([locationId], name: "idx_units_location")
  @@index([tenantId], name: "idx_units_tenant")
  @@map("units")
}

model Visitor {
  id           String   @id @default(uuid())
  name         String
  document     String
  vehiclePlate String?  @map("vehicle_plate")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  residentVisitors ResidentVisitor[]

  @@index([document], name: "idx_visitors_document")
  @@map("visitors")
}

model ResidentVisitor {
  id         String   @id @default(uuid())
  residentId String   @map("resident_id")
  visitorId  String   @map("visitor_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt  DateTime @map("expires_at") @db.Timestamptz(6)

  resident User    @relation(fields: [residentId], references: [id], onDelete: Cascade)
  visitor  Visitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@unique([residentId, visitorId], name: "resident_visitor_unique")
  @@index([residentId], name: "idx_resident_visitors_resident")
  @@index([visitorId], name: "idx_resident_visitors_visitor")
  @@index([expiresAt], name: "idx_resident_visitors_expires")
  @@map("resident_visitors")
}